{"version":3,"file":"test.js","sources":["../../../src/validate-path.js","../../../src/concat-refpath.js","../../../src/ref.js","../../../src/index.js","../../test-mocha.js"],"sourcesContent":["export var validatePath = function(path) {\n     return /^[^\\s\\/]+(?:\\/[^\\s\\/]+)*$/.test(path);\n};\n","import { validatePath } from './validate-path';\n\n/**\n * Transforms a firestore path string \"collection/doc/...\" into a firestore reference\n * and concatenates with a previously created firestore reference object (if is passed).\n * If \"ref\" first argument is evaluated as false, \"path\" second argument should init with\n * \"collection\". Ex: somecollection/somedoc/innercollection, otherwise the firestore lib will return error.\n * @param {Object} firestore firestore application object e.g: db = firebase().firestore()\n * @param {Object} ref firestore reference previously created\n * @param {string} path firestore path segments (parsed from a string in format \"collection/doc/collection/...\")\n * @returns a firestore reference resulted from the concatenation of ref and path arguments\n */\nvar concatRefPath = function(firestore, ref, path) {\n    var ref_ = ref;\n    var path_ = path.trim();\n    if (validatePath(path_)) {\n        var pathElms = path_.split('/');\n        var rest;\n        if (pathElms.length > 0) {\n            if (ref_) {\n                if (ref_.collection) {\n                    rest = 0;\n                    ref_ = ref_.collection(pathElms[0]);\n                } else if (ref_.doc) {\n                    rest = 1;\n                    ref_ = ref_.doc(pathElms[0]);\n                } else {\n                    // console.error(`Invalid FirestoreReference:`, ref); obs: already verified in ref.js, never reaches here using the entire library\n                    return null;\n                }\n            } else { // ref_ expects only null\n                rest = 0;\n                ref_ = firestore.collection(pathElms[0]);\n            }\n            for (var i = 0; i < pathElms.length; i++) {\n                if (i === 0) {\n                    continue;\n                }\n                (i % 2 === rest) ? ref_ = ref_.collection(pathElms[i]) : ref_ = ref_.doc(pathElms[i]);\n            }\n        }\n    } else {\n        console.error('Firestore reference ' + path_ + ' string is in invalid format!');\n        ref_ = null;\n    }\n    return ref_;\n};\n\nexport { concatRefPath };\n","import { concatRefPath } from './concat-refpath';\n\n/**\n * Transforms a firestore reference path string \"collection/doc/...\" into a firestore reference object\n * or concatenates a prevously created reference with an inner reference writen as a path string format.\n * @param {Object} firestore firestore application object e.g: db = firebase().firestore()\n * @param {Object} reference firestore reference previously created or a path string in format \"collection/doc/...\"\n * @param {String} refPath a path string in format \"collection/doc/...\" (optional)\n * @returns a firestore reference resulted from the concatenation and transformation of reference and refPath arguments\n */\nexport var ref = function(firestore, reference, refPath) {\n    var ref_;\n    if (typeof reference === 'string') {\n        ref_ = concatRefPath(firestore, null, reference);\n    } else {\n        if (reference && (reference.collection || reference.doc)) { // typeof FirestoreReference\n            ref_ = reference;\n        } else {\n            console.error('Invalid FirestoreReference:', reference);\n            ref_ = null;\n        }\n    }\n    if (ref_ && typeof refPath !== 'undefined') {\n        if (typeof refPath === 'string') {\n            ref_ = concatRefPath(firestore, ref_, refPath);\n        } else {\n            ref_ = null;\n            console.error('refPath expects typeof string:', refPath);\n        }\n    }\n    return ref_;\n};\n","import { ref } from './ref';\n\n/**\n * Returns ref(reference, refPath) function using a firebase().firestore instance\n * @param {Object} firestore firebase().firestore instance\n * @returns A ref() function that concatenates a firebase reference object with\n * a firestore reference path string (e.g: \"collection/doc/subcollection/...\")\n * and returns a merged firestore reference.\n */\nexport var firestoreRef = function(firestore) {\n    return (function(fs) {\n        /**\n         * Transforms a firestore reference path string (in format \"collection/doc/...\") into a firestore reference object\n         * or concatenates a prevously created reference with an inner reference defined as a path string format.\n         * The \"reference\" first argument may be a string path (in format \"collection/doc/...\") or a firestore reference\n         * object previously created. If \"reference\" is a string path, it should init with a \"collection\" reference and\n         * refers to a top level collection. If \"reference\" or \"refPath\" are invalid (\"reference\" is null, undefined, not a firestore\n         * reference object type or a string, empty string or \"refPath\" is not a string or empty string),\n         * the return will be null.\n         * @param {Object} reference firestore reference previously created or a path string in format \"collection/doc/...\"\n         * @param {String} refPath a path string in format \"collection/doc/...\" (optional)\n         * @returns a firestore reference resulted from the concatenation and transformation of reference and refPath arguments\n         */\n        var r = function(reference, refPath) {\n            return ref(fs, reference, refPath);\n        };\n        return r;\n    })(firestore);\n};\n","/*eslint-disable*/\nimport { expect, should as shd } from 'chai';\n\nimport { validatePath } from '../src/validate-path';\nimport { concatRefPath } from '../src/concat-refpath';\nimport { firestoreRef } from '../src/index';\n\nimport * as firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nconst should = shd();\nconst config = {\n    apiKey: \"AIzaSyAYiJoJMxAJmRXHvOWVnRAciKcI-x5sg40\",\n    authDomain: \"firestore-ref-test.firebaseapp.com\",\n    databaseURL: \"https://firestore-ref-test.firebaseio.com\",\n    projectId: \"firestore-ref-test\",\n    storageBucket: \"firestore-ref-test.appspot.com\",\n    messagingSenderId: \"859161328509\"\n};\n\n\nconst firestore = firebase.initializeApp(config).firestore();\n\n/* UNIT TESTS */\n\ndescribe('#validatePath', function() {\n    context('test regex against Firestore collection and documents name conventions', function() {\n        it('should return false from invalid strings', function() {\n            expect(validatePath('')).to.be.false;\n            expect(validatePath('/')).to.be.false;\n            expect(validatePath('/acollection')).to.be.false;\n            expect(validatePath('acollection/')).to.be.false;\n            expect(validatePath('acollection//adoc')).to.be.false;\n        });\n        it('should return true from valid strings', function() {\n            expect(validatePath('acollection')).to.be.true;\n            expect(validatePath('acollection/5dy2QgnUQY27JRTHY5xP')).to.be.true;\n            expect(validatePath('acollection/5dy2QgnUQY27JRTHY5xP/0R9vos3I3UL2djGjqVPB')).to.be.true;\n        });\n    });\n});\n\ndescribe('#concatRefPath', function() {\n\n    context('test only referece path parser', function() {\n        it('should return a correct reference object', function() {\n            expect(\n                concatRefPath(\n                    firestore, \n                    null, \n                    'toplevelcollection'\n                )\n            ).to.eql(firestore.collection('toplevelcollection'));\n            expect(\n                concatRefPath(\n                    firestore, \n                    null, \n                    'toplevelcollection/somedoc/subcollection'\n                )\n            ).to.eql(firestore.collection('toplevelcollection').doc('somedoc').collection('subcollection'));\n        });\n    });\n    \n    context('with a firestore reference passed as first argument and deeper references', function() {\n        const someCollection = firestore.collection('somecollection');\n        const someDoc = firestore.collection('somecollection').doc('someDoc');\n\n        it('should return a correct reference object', function() {\n            expect(\n                concatRefPath(\n                    firestore, \n                    someCollection, \n                    'innerdoc'\n                )\n            ).to.eql(someCollection.doc('innerdoc'));\n\n            expect(\n                concatRefPath(\n                    firestore, \n                    someCollection, \n                    'innerdoc/innercollection/moreinnerdoc/moreinnercollection'\n                )\n            ).to.eql(someCollection.doc('innerdoc').collection('innercollection').doc('moreinnerdoc').collection('moreinnercollection'));\n       \n            expect(\n                concatRefPath(\n                    firestore, \n                    someDoc, \n                    'innercollection'\n                )\n            ).to.eql(someDoc.collection('innercollection'));\n        });\n    });\n});\n\n/* INTEGRATION TESTS */\n\nconst ref = firestoreRef(firestore);\n\ndescribe('#firestoreRef', function() {\n    context('invalid arguments', function() {\n        it('should return null', function() {\n            should.equal(ref(null, 'carbrands/ford'), null);\n            should.equal(ref({}.undef, 'carbrands'), null);\n            should.equal(ref({a: 'a', b: 'b'}, 'carbrands/ford/models'), null);\n            should.equal(ref(firestore.collection('carbrands'), null), null);\n            should.equal(ref(firestore.collection('carbrands'), {a: 'a', b: 'b'}), null);\n            should.equal(ref(firestore.collection('carbrands'), ''), null);\n            should.equal(ref(firestore.collection('carbrands'), '/'), null);\n            should.equal(ref(firestore.collection('carbrands'), '/ford'), null);\n            should.equal(ref(firestore.collection('carbrands'), 'ford/'), null);\n            should.equal(ref(firestore.collection('carbrands'), 'ford//models'), null);\n        });\n    });\n    context('valid arguments', function() {\n        it('should return the same firestore reference if only a firestore reference is passed', function() {\n            expect(ref(firestore.collection('carbrands').doc('ford')))\n                .to.be.eql(firestore.collection('carbrands').doc('ford'));\n        });\n        it('should return the expected firestore reference', function() {\n            expect(ref('carbrands/ford'))\n                .to.be.eql(firestore.collection('carbrands').doc('ford'));\n            expect(ref('carbrands/ford', 'models/camaro'))\n                .to.be.eql(firestore.collection('carbrands').doc('ford').collection('models').doc('camaro'));\n            expect(ref(firestore.collection('carbrands'), 'ford'))\n                .to.be.eql(firestore.collection('carbrands').doc('ford'));\n        });\n    });\n});"],"names":["shd","firebase.initializeApp","expect","ref"],"mappings":"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"}